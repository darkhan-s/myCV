name: Build LaTeX and Deploy PDF to pdf-output

on:
  push:
    branches:
      - main
      - '*'
    paths-ignore:
      - 'pdf-output/**'  # Ignore changes in the pdf-output branch to prevent recursive triggers

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: danteev/texlive  # A Docker image with LaTeX pre-installed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set TEX file based on branch
        id: set-tex-file
        run: |
          # Assuming .tex files are named after branch names
          BRANCH_NAME=${GITHUB_REF##*/}
          TEX_FILE="${BRANCH_NAME}.tex"
          echo "::set-output name=tex_file::$TEX_FILE"

      - name: Compile LaTeX to PDF using xelatex
        run: |
          TEX_FILE="${{ steps.set-tex-file.outputs.tex_file }}"
          latexmk -pdf -xelatex -interaction=nonstopmode $TEX_FILE

      - name: Upload compiled PDF as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: compiled-cv
          path: "*.pdf"  # Upload the generated PDF

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/pdf-output'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download compiled PDF artifact
        uses: actions/download-artifact@v3
        with:
          name: compiled-cv
          path: ./  # Downloads the PDF to the repository

      - name: Setup output branch
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Set the correct remote URL using the PAT
          git remote set-url origin https://x-access-token:${{ secrets.DEPLOYMENT_KEY }}@github.com/darkhan-s/myCV.git

          git fetch --all

          # Check out the pdf-output branch (create if not exists)
          git checkout -B pdf-output origin/pdf-output || git checkout -b pdf-output

          # Move the PDFs to the pdf-output branch
          mv -f *.pdf .

          # Add the PDF files to pdf-output branch
          git add *.pdf
          git commit -m "Update with latest build from ${{ github.ref }}" || echo "No changes to commit"
          
          # Push changes to pdf-output branch
          git push --force origin pdf-output

        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOYMENT_KEY }}

